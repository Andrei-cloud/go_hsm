// DO NOT EDIT THIS FILE.
// Code generated by "plugingen"; DO NOT EDIT.
package main

import (
    "fmt"
    "github.com/andrei-cloud/go_hsm/pkg/hsmplugin"
    "github.com/andrei-cloud/go_hsm/internal/hsm/logic"
)

//go:wasm-module env
//export DecryptUnderLMK
func DecryptUnderLMK(ptr, length uint32) uint64

//go:wasm-module env
//export EncryptUnderLMK
func EncryptUnderLMK(ptr, length uint32) uint64

//export Alloc
func Alloc(size uint32) hsmplugin.Buffer {
  return hsmplugin.ToBuffer(make([]byte, size))
}

//export Execute
func Execute(buf hsmplugin.Buffer) uint64 {
    in := hsmplugin.Buffer(buf).ToBytes()
    hsmplugin.LogToHost(fmt.Sprintf("A0  command input: %x", in))

    decryptUnderLMK := func(data []byte) ([]byte, error) {
        if len(data) == 0 {
            return nil, fmt.Errorf("encrypt data is empty")
        }
        hsmplugin.LogToHost(fmt.Sprintf("A0  decrypt request: %x", data))

        buf := hsmplugin.ToBuffer(data)

        r := DecryptUnderLMK(buf.AddressSize())
        if r == 0 {
            hsmplugin.LogToHost("A0  decrypt failed")
            return nil, fmt.Errorf("decrypt failed")
        }

        result := hsmplugin.Buffer(r).ToBytes()
        hsmplugin.LogToHost(fmt.Sprintf("A0  decrypt result: %x", result))

        return result, nil
    }

    encryptUnderLMK := func(data []byte) ([]byte, error) {
        if len(data) == 0 {
            return nil, fmt.Errorf("encrypt data is empty")
        }
        hsmplugin.LogToHost(fmt.Sprintf("A0  encrypt request: %x", data))


        buf := hsmplugin.ToBuffer(data)
        
        r := EncryptUnderLMK(buf.AddressSize())
        if r == 0 {
            hsmplugin.LogToHost("A0  encrypt failed")
            return nil, fmt.Errorf("encrypt failed")
        }

        result := hsmplugin.Buffer(r).ToBytes()
    
        hsmplugin.LogToHost(fmt.Sprintf("A0  encrypt result: %x", result))

        return result, nil
    }

    out, err := logic.ExecuteA0(in, decryptUnderLMK, encryptUnderLMK)
    if err != nil {
        hsmplugin.LogToHost(fmt.Sprintf("A0  execution failed: %v", err))
        return uint64(hsmplugin.WriteError("A0 "))
    }

    hsmplugin.LogToHost(fmt.Sprintf("A0  command output: %x", out))

    return uint64(hsmplugin.ToBuffer(out))
}

func main() {}
